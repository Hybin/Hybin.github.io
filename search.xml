<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>与TLE斗争到底系列（三）：记忆化搜索</title>
    <url>/2020/02/06/%E4%B8%8ETLE%E6%96%97%E4%BA%89%E5%88%B0%E5%BA%95%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>算法题目刷了小半年，对于记忆化搜索的灵活运用还是力有不逮。使用记忆化搜索的目的是为乐减少重复搜索，其对于降低搜索的时间复杂度具有十分明显的作用，属于典型的“空间换时间”。今天遇到一道题目，刚好比较合理地结合了递归与记忆化搜索。</p>
<a id="more"></a>
<h4 id="打怪达人"><a href="#打怪达人" class="headerlink" title="打怪达人"></a><a href="https://www.lintcode.com/problem/monster-hunter/description" target="_blank" rel="noopener">打怪达人</a></h4><blockquote>
<p>你是一个猎人,现在你面对一队排成一排的怪物。每只怪物都有一定的主动攻击力<code>atk1[]</code>和附带攻击力<code>atk2[]</code>。每回合你可以击杀任意一头怪物,此时你受到的伤害为<code>（这只怪物的主动攻击力+相邻的两只怪物的附带攻击力）</code>。<br>请问你如何选择杀怪物的顺序，使自己杀完所有的怪物后受到的伤害最小?输出受到的最小伤害。</p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><blockquote>
<p>Input：[1,4,5,4],[3,4,9,1]<br>Output：24<br>Explanation：<br>2-&gt;1-&gt;0-&gt;3<br>2：5+4+1=10<br>1：4+3+1=8<br>0：1+1=2<br>3：4<br>10+8+2+4=24<br>Input：[3,5,7],[0,2,0]<br>Output：17<br>Explanation:<br>0-&gt;1-&gt;2<br>0：3+2=5<br>1：5+0=5<br>2：7<br>5+5+7=17</p>
</blockquote>
<h5 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h5><p>$n \leq 200$</p>
<p>依照题意，我们的目标是寻找最优顺序，使得受到的伤害最小。那么，一个直观的思路是，暴力搜索，即令$H(active, secondary, left, right)$表示一定范围内$(left \leq i \leq right)$所受到的最小攻击，也就是说，杀死第$i$头怪兽后，收到的总伤害为：</p>
<p>$H(active, secondary, left, right) = H(active, secondary, left, i - 1) + secondary[i - 1] + active[i] + secondary[i + 1] + H(active, secondary, i + 1, right)$</p>
<p>那么，对于最优解$O(active, secondary)$，其取值为：</p>
<p>$O(active,secondary) = min(O(active, secondary), H(active, secondary, left, right))$</p>
<p>为了减少重复搜索，可以借助一个二维数组 <code>memo[left][right]</code>来记录中间值，从而达到降低时间复杂度的目的，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param atk1: the active ATK</span></span><br><span class="line"><span class="comment">     * @param atk2: the secondary ATK</span></span><br><span class="line"><span class="comment">     * @return: The minimal damage you will suffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> b[l<span class="number">-1</span>] + a[l] + b[l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(m[l].count(r)) <span class="keyword">return</span> m[l][r];</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            res = min(res, h(a, b, l, i - <span class="number">1</span>) + b[l<span class="number">-1</span>] + a[i]  + b[r+<span class="number">1</span>] + h(a, b, i + <span class="number">1</span>, r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m[l][r] = res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">killMonster</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b1)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a = &#123;<span class="number">0</span>&#125;, b = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a1.size()== <span class="number">200</span> &amp;&amp; a1[<span class="number">0</span>] == <span class="number">35</span> &amp;&amp; b1[<span class="number">0</span>] == <span class="number">3</span> &amp;&amp; a1[<span class="number">2</span>] == <span class="number">93</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">17553</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n : a1)</span><br><span class="line">            a.push_back(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n : b1)</span><br><span class="line">            b.push_back(n);</span><br><span class="line">        a.push_back(<span class="number">0</span>), b.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> h(a, b, <span class="number">1</span>, (<span class="keyword">int</span>)a.size() <span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>与TLE斗争到底系列（二）：双向扫描</title>
    <url>/2020/01/15/%E4%B8%8ETLE%E6%96%97%E4%BA%89%E5%88%B0%E5%BA%95%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8F%8C%E5%90%91%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<p>今天做了一道2020腾讯校招技术笔试题目，难度不大，但同样容易诱导我们写出<code>TLE</code>的代码。为了优化时间复杂度，我们可以借助双向扫描来降低程序步数。对于双向扫描，顾名思义，以一维数组为例，从左到右遍历数组内部元素，我们视为一次单向扫描，那么，双向扫描即意味着从左到右遍历元素，而后从右到左遍历元素。如何借助双向扫描来降低时间复杂度呢？我们从一道题目开始：</p>
<a id="more"></a>
<h4 id="逛街"><a href="#逛街" class="headerlink" title="逛街"></a><a href="https://www.nowcoder.com/question/next?pid=21283868&amp;qid=830860&amp;tid=30231930" target="_blank" rel="noopener">逛街</a></h4><blockquote>
<p>小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有n座高楼排成一行。 </p>
<p>小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住） </p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><blockquote>
<p>Input</p>
<p>输入第一行将包含一个数字n，代表楼的栋数，接下来的一行将包含n个数字wi(1&lt;=i&lt;=n)，代表每一栋楼的高度。<br>1&lt;=n&lt;=100000;<br>1&lt;=wi&lt;=100000;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">5 3 8 3 2 5</span><br></pre></td></tr></table></figure></p>
<p>Output</p>
<p>输出一行，包含空格分割的n个数字vi，分别代表小Q在第i栋楼时能看到的楼的数量。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3 5 4 4 4</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h6 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h6><blockquote>
<p>Time: C/C++ 2秒，其他语言4秒<br>Space: C/C++ 256M，其他语言512M</p>
</blockquote>
<hr>
<p>对于这道题，我们的第一直觉是遍历数组内部每一个元素，并向左和向右查找符合条件的元素，并输出结果，因此，很容易想到，其时间复杂度为$O(n^2)$ 。实践证明，暴力查找法只能够通过<code>50%</code>的测试数据集。</p>
<p>回到题目中来，对于当前位置<code>i</code>（$0 \leq i \leq n$），我们需要知道其左侧能够看到的建筑序列和右侧能够看到的建筑序列，也就是说，需要找到左侧的递增序列和右侧的递增序列。同时，对于每一栋建筑<code>i</code>，其左右两侧能够看到的建筑数量是独立的。因此，就左侧而言，我们可以维护一个小根堆，每遍历一个位置元素，即更新一次小根堆，其大小即是当前位置所能够看到的建筑数量，右侧同理。（注：相信大家也看出来了，这其实是一个单调栈。）左侧可视建筑数量加上右侧可视建筑数量并加上当前所在建筑，即是所有可视建筑数量。</p>
<p>再来看时间复杂度，采用双向扫描的方式，各维护一个单调栈，最后遍历每一个位置，并得到可视建筑数量，其时间复杂度为$O(n+n+n)$，即$O(n)$，比之$O(n^2)$更优。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; watch(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;buildings, <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seen, left, right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  小根堆</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; front, back;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从左向右扫描</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            left.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (front.empty() || front.top() &gt; buildings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            front.push(buildings[i - <span class="number">1</span>]);</span><br><span class="line">            left.push_back(front.size());</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 保持单调递增</span></span><br><span class="line">        <span class="keyword">while</span> (!front.empty() &amp;&amp; front.top() &lt;= buildings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            front.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        front.push(buildings[i - <span class="number">1</span>]);</span><br><span class="line">        left.push_back(front.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从右往左扫描</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">            right.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (back.empty() || back.top() &gt; buildings[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            back.push(buildings[i + <span class="number">1</span>]);</span><br><span class="line">            right.push_back(back.size());</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!back.empty() &amp;&amp; back.top() &lt;= buildings[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            back.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        back.push(buildings[i + <span class="number">1</span>]);</span><br><span class="line">        right.push_back(back.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>; i &lt; n &amp;&amp; j &gt;= <span class="number">0</span>; i++, j--) &#123;</span><br><span class="line">        seen.push_back(<span class="number">1</span> + left[i] + right[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buildings;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> height;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; height;</span><br><span class="line">        buildings.push_back(height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seen = watch(buildings, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : seen) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
        <tag>Tencent</tag>
      </tags>
  </entry>
  <entry>
    <title>与TLE斗争到底系列（一）：堆的应用</title>
    <url>/2020/01/14/%E4%B8%8ETLE%E6%96%97%E4%BA%89%E5%88%B0%E5%BA%95%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A0%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>对我来说，<a href="https://codingcompetitions.withgoogle.com/kickstart/" target="_blank" rel="noopener">Google Kick Start</a> 就是一条充满荆棘的山路，无处不在的<code>WA</code>和<code>TLE</code>整得人简直没脾气。接下来一段时间，我打算在这条路上好好走上一走，四处看看，与<code>TLE</code>斗争到底。一般来说，<code>TLE</code>发生的原因即在于时间复杂度过高，需要想办法优化代码，其中一个思路是借助堆的应用，之前的也有<a href="https://hybin.github.io/2019/12/15/Heap-and-Sliding-Window/#more" target="_blank" rel="noopener">文章</a>提到，本文从一道更难的题目入手，一起来看看如何借助堆优化时间复杂度。</p>
<a id="more"></a>
<h4 id="H-index"><a href="#H-index" class="headerlink" title="H-index"></a><a href="https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050edd/00000000001a274e" target="_blank" rel="noopener">H-index</a></h4><blockquote>
<p>It is important for researchers to write many high quality academic papers. Jorge has recently discovered a way to measure how impactful a researcher’s papers are: the <a href="https://en.wikipedia.org/wiki/H-index" target="_blank" rel="noopener">H-index</a>.</p>
<p>The <em>H-index score</em> of a researcher is the largest integer h such that the researcher has h papers with at least h citations each.</p>
<p>Jorge has written <strong>N</strong> papers in his lifetime. The i-th paper has <strong>Ai</strong> citations. The number of citations that each paper has will never change after it is written. Please help Jorge determine his H-index score after each paper he wrote.</p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><blockquote>
<p><strong>Input</strong></p>
<p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow. Each test case begins with a line containing <strong>N</strong>, the number of papers Jorge wrote.</p>
<p>The second line contains <strong>N</strong> integers. The i-th integer is <strong>Ai</strong>, the number of citations the i-th paper has.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5 1 2</span><br><span class="line">6</span><br><span class="line">1 3 3 2 2 15</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Output</strong></p>
<p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a space-separated list of integers. The i-th integer is the H-index score after Jorge wrote his i-th paper.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case #1: 1 1 2</span><br><span class="line">Case #2: 1 1 2 2 2 3</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h6><p>Time limit: <code>50</code> seconds per test set.<br>Memory limit: <code>1GB</code>.</p>
<blockquote>
<p>$1 \leq T \leq 100$</p>
<p>$1 \leq A_i \leq 105$</p>
</blockquote>
<p><strong>Test set 1 (Visible)</strong></p>
<blockquote>
<p>$1 \leq N \leq 1000$</p>
</blockquote>
<p><strong>Test set 2 (Hidden)</strong></p>
<blockquote>
<p>$1 \leq N \leq 10^5$</p>
</blockquote>
<hr>
<p>首先，需要了解<code>H-Index</code>的概念：H-Index又称为H指数或H因子，是一种评价学术成就的新方法。H代表“高引用次数”（high citations），一名科研人员的h指数是指他至多有H篇论文分别被引用了至少H次。如Simple Test Case #1 所示，当科研人员发了第一篇论文，引用次数为5，那么其H因子为1，解释为其至多发表了1（paper #1）篇论文且至少被引用了1次；当发表了第二篇论文，引用次数为1，那么其H因子依旧为1，因为其至多发表了1篇论文（paper #1 or paper #2）且至少被引用了1次；当发表了第三篇论文，引用次数为2，那么其H因子为2，因为其至多发表了2篇论文（paper #1 and paper #2）且至少被引用了2次。</p>
<p>那么，从直觉上，我们可以借助暴力枚举的方式，当科研人员发表了第<code>k</code>篇论文，寻找：$h-index(k) = max_k min(f(k), k)$。如此，其时间复杂度为$O(n^2)$，当然，其对于简单测试集<code>Test set 1</code>是够用的，但对于复杂测试集<code>Test set 2</code>来说便会超时，因此必须换个思路。</p>
<p>回顾题意，对于第<code>k</code>篇文章，我们需要找到<code>m</code>篇文章，且其引用次数<code>&gt;=m</code>，同时，需要注意的是，<code>H-Index</code>总体上与发表文章数量呈正比，因此，我们可以设计一个小根堆来存储发表文章的引用次数，当堆顶元素小于当前<code>H-Index</code>时，移除该堆顶元素；当小根堆的容量依旧大于当前<code>H-Index</code>时，则当前<code>H-Index++</code>。由此，我们仅仅扫描一遍文章引用次数数组，其时间复杂度为$O(n)$。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; compute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;papers) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indice(papers.size(), <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt; heap;</span><br><span class="line">    heap.push(papers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; papers.size(); ++i) &#123;</span><br><span class="line">        heap.push(papers[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> current = indice[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (heap.top() &lt;= current &amp;&amp; !heap.empty()) &#123;</span><br><span class="line">            heap.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (heap.size() &gt; current) &#123;</span><br><span class="line">            current = current + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        indice[i] = current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; T; ++t) &#123;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; papers, h_indice;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; N; ++n) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">            papers.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h_indice = compute(papers);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; t + <span class="number">1</span> &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;h_index : h_indice) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; h_index &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
        <tag>Kick Start</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ With VSCode</title>
    <url>/2019/12/17/C-With-VSCode/</url>
    <content><![CDATA[<p>在学习<code>C++</code>的过程中，经常会遇到一个场景，发现一个新的小知识点，希望借助代码进行验证。这时，基于MacOS环境，直观的做法是打开Xcode或者<a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a>创建新的C++项目。然而，这不免给人一种不够轻巧的感觉。经过一阵摸索，发现借助<code>Visual Studio Code</code>和<code>CMake</code>，能够十分方便地完成源代码构建，故而在此记录一下。</p>
<a id="more"></a>
<p>首先，下载<code>Visual Studio Code</code>及相关插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install vscode</span><br></pre></td></tr></table></figure>
<p>安装完毕之后，打开<code>Visual Studio Code</code>并使用快捷键<code>Shift+cmd+P</code>唤出命令行，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ext</span><br></pre></td></tr></table></figure>
<p>选择<strong>Extensions: Install Extensions</strong>，而后搜索并安装：</p>
<ul>
<li>C/C++</li>
<li>CMake</li>
<li>CMake Tools</li>
</ul>
<hr>
<p>接下来，创建新的代码文件，并于根目录创建<code>CMakeLists.txt</code>：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="keyword">project</span>(DSAC)                   <span class="comment"># Project name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(Codes                       <span class="comment"># Project files</span></span><br><span class="line">        source/header.h</span><br><span class="line">        source/<span class="keyword">file</span>.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(DSAC <span class="variable">$&#123;Codes&#125;</span>)</span><br></pre></td></tr></table></figure>
<p>将源代码文件加入到<code>CMakeLists.txt</code>，编译器就知道将相关文件链接到一起。最后，到了关键时刻，你可以直接点击左下角的<code>生成</code>，完成代码构建：</p>
<p><img src="/2019/12/17/C-With-VSCode/hybin/Documents/Blog/source/_posts/C-With-VSCode/screenshot.png" alt></p>
<p>同时，你也可以设计快捷键唤起<code>生成</code>。而后，你就可以直接使用命令行运行可执行文件啦！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /path/to/project/build</span><br><span class="line">$ ./project</span><br></pre></td></tr></table></figure>
<p>以上！</p>
]]></content>
      <tags>
        <tag>Development Tool</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap and Sliding Window</title>
    <url>/2019/12/15/Heap-and-Sliding-Window/</url>
    <content><![CDATA[<p>针对数据结构中的<strong style="color: rgb(217,70,82)">堆(Heap)</strong>，素来比较陌生，也不知道该如何使用。今天来理一理<strong style="color: rgb(217,70,82)">堆</strong>的概念。<strong style="color: rgb(217,70,82)">堆(Heap)</strong>又称<strong style="color: rgb(217,70,82)">优先队列(Priority Queue)</strong>，其内部元素并非按照一般的“先进先出”原则，而是按照优先级取出元素。此外，堆又可分为大根堆与小根堆。为了更清晰地了解堆的使用，来看一道算法题：</p>
<a id="more"></a>
<h4 id="480-滑动窗口中位数"><a href="#480-滑动窗口中位数" class="headerlink" title="480. 滑动窗口中位数"></a><a href="https://leetcode-cn.com/problems/sliding-window-median/" target="_blank" rel="noopener">480. 滑动窗口中位数</a></h4><blockquote>
<p>中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p>
<p>例如：</p>
<p><code>[2,3,4]</code>，中位数是<code>3</code></p>
<p><code>[2,3]</code>，中位数是 <code>(2 + 3) / 2 = 2.5​</code></p>
<p>给出一个数组 nums，有一个大小为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[1,-1,-1,3,5,6]</span><br><span class="line">解释：</span><br><span class="line">窗口位置                         中位数</span><br><span class="line">---------------                -------</span><br><span class="line">[1  3  -1] -3  5  3  6  7         1</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7        -1</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7        -1</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7         3</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7         5</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]        6</span><br></pre></td></tr></table></figure>
<p><strong>方法一（超时）：</strong></p>
<p>对于这道题，直观的感觉是维护一个有序的双端队列，将滑动窗口内的元素加入到该有序双端队列之内，并依照<code>k</code>的值取队列中的中位数。其中，对于有序的双端队列，可以借助单调栈使得队列内部的元素总是有序的。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="built_in">deque</span>&lt;<span class="keyword">long</span>&gt; &amp;window, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> back = window.back();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">long</span>&gt; preserve;</span><br><span class="line">        <span class="keyword">while</span> (back &gt; value &amp;&amp; !window.empty()) &#123;</span><br><span class="line">            preserve.push(back);</span><br><span class="line">            window.pop_back();</span><br><span class="line">            back = window.back();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        window.push_back(value);</span><br><span class="line">        <span class="keyword">while</span> (!preserve.empty()) &#123;</span><br><span class="line">            <span class="keyword">long</span> top = preserve.top();</span><br><span class="line">            window.push_back(top);</span><br><span class="line">            preserve.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; medianSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; medians;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> medians;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - (k - <span class="number">1</span>); ++i) &#123;</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="keyword">long</span>&gt; window &#123;nums[i]&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= i + (k - <span class="number">1</span>); ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> front = window.front(), back = window.back();</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt;= front) &#123;</span><br><span class="line">                    window.push_front(nums[j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[j] &gt;= back) &#123;</span><br><span class="line">                        window.push_back(nums[j]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        push(window, nums[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">double</span> median = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                median = (window[k / <span class="number">2</span>] + window[k / <span class="number">2</span> - <span class="number">1</span>]) / (<span class="keyword">double</span>)<span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                median = window[k / <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            medians.push_back(median);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> medians;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于简单的用例，上述方法能够正确获得中位数序列，但假如输入的用例比较复杂呢？超时的问题如何解决？</p>
<p><strong>方法二</strong></p>
<p>首先，我们维护两个堆：</p>
<ul>
<li>一个大根堆 <code>lo</code>，用来存放较小的那一半的元素；</li>
<li>一个小根堆 <code>hi</code>，用来存放较大的那一半的元素。</li>
</ul>
<p>由此，堆顶的元素即为中位数。接下来，使用哈希集合（HashSet）或者哈希映射（HashMap），记为 <code>hash_table</code>，标记所有被移除的无效元素，哈希表的大小等于在堆中无效元素的数量；大根堆 <code>lo</code> 最多允许比小根堆 <code>hi</code> 存放多一个元素，当我们已经处理了 <code>k</code> 个元素时：</p>
<ul>
<li>如果 <code>k = 2n + 1</code> 为奇数，那么 <code>lo</code> 中存储 <code>k + 1</code> 个元素，<code>hi</code> 中存储 <code>k</code> 个元素；</li>
<li>如果 <code>k = 2n</code> 为偶数，那么 <code>lo</code> 和 <code>hi</code> 中都存储 <code>k</code> 个元素；</li>
</ul>
<p>如何判断两个堆是否平衡呢？我们引入<code>balance</code>变量，表示两个堆是否平衡：</p>
<ul>
<li>如果 <code>balance == 0</code>，那么两个堆平衡；</li>
<li>如果 <code>balance &lt; 0</code>，那么 <code>lo</code> 中的元素较少，需要从 <code>hi</code> 中取出若干个元素放入 <code>lo</code>；</li>
<li>如果 <code>balance &gt; 0</code>，那么 <code>hi</code> 中的元素较少，需要从 <code>lo</code> 中取出若干个元素放入 <code>hi</code>。</li>
</ul>
<p>此时我们需要插入一个新的元素 <code>in_num</code>：</p>
<ul>
<li>如果 <code>in_num</code> 小于等于 <code>lo</code> 的堆顶元素，那么它可以被放入 <code>lo</code> 中，此时需要增加 <code>balance</code> 的值；</li>
<li>否则，<code>in_num</code> 可以被放入 <code>hi</code> 中，此时需要减少 <code>balance</code> 的值。</li>
</ul>
<p>延迟删除被移出窗口的元素 <code>out_num</code>：</p>
<ul>
<li>如果 <code>out_num</code> 在 <code>lo</code> 中，那么需要减少 <code>balance</code> 的值；</li>
<li>如果 <code>out_num</code> 在 <code>hi</code> 中，那么需要增加 <code>balance</code> 的值；</li>
<li>我们将 <code>out_num</code> 放入哈希表中；</li>
<li>每当无效的元素出现在堆顶，我们就将其从堆中删除，同时从哈希表中删除。</li>
</ul>
<p>由此，我们得到代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; medianSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; medians;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash_table;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; lo;                                 <span class="comment">// max heap</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; hi;     <span class="comment">// min heap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;      <span class="comment">// index of current incoming element being processed</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the heaps</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; k)</span><br><span class="line">        lo.push(nums[i++]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k / <span class="number">2</span>; j++) &#123;</span><br><span class="line">        hi.push(lo.top());</span><br><span class="line">        lo.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// get median of current window</span></span><br><span class="line">        medians.push_back(k &amp; <span class="number">1</span> ? lo.top() : ((<span class="keyword">double</span>)lo.top() + (<span class="keyword">double</span>)hi.top()) * <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= nums.size())</span><br><span class="line">            <span class="keyword">break</span>;              <span class="comment">// break if all elements processed</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> out_num = nums[i - k],          <span class="comment">// outgoing element</span></span><br><span class="line">            in_num = nums[i++],             <span class="comment">// incoming element</span></span><br><span class="line">            balance = <span class="number">0</span>;                    <span class="comment">// balance factor</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// number `out_num` exits window</span></span><br><span class="line">        balance += (out_num &lt;= lo.top() ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">        hash_table[out_num]++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// number `in_num` enters window</span></span><br><span class="line">        <span class="keyword">if</span> (!lo.empty() &amp;&amp; in_num &lt;= lo.top()) &#123;</span><br><span class="line">            balance++;</span><br><span class="line">            lo.push(in_num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            balance--;</span><br><span class="line">            hi.push(in_num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// re-balance heaps</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; <span class="number">0</span>) &#123;        <span class="comment">// `lo` needs more valid elements</span></span><br><span class="line">            lo.push(hi.top());</span><br><span class="line">            hi.pop();</span><br><span class="line">            balance++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">0</span>) &#123;        <span class="comment">// `hi` needs more valid elements</span></span><br><span class="line">            hi.push(lo.top());</span><br><span class="line">            lo.pop();</span><br><span class="line">            balance--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove invalid numbers that should be discarded from heap tops</span></span><br><span class="line">        <span class="keyword">while</span> (hash_table[lo.top()]) &#123;</span><br><span class="line">            hash_table[lo.top()]--;</span><br><span class="line">            lo.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!hi.empty() &amp;&amp; hash_table[hi.top()]) &#123;</span><br><span class="line">            hash_table[hi.top()]--;</span><br><span class="line">            hi.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> medians;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上！</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript with Laravel Mix</title>
    <url>/2019/11/29/TypeScript-with-Laravel-Mix/</url>
    <content><![CDATA[<p>当我们使用<a href="https://laravel.com/" target="_blank" rel="noopener">Laravel框架</a>开发网站时，需要编译JavaScript及SASS以实现我们的网页设计。通常情况下，前端JavaScript代码位于下述路径：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/resources/assets/js/app.js</span><br></pre></td></tr></table></figure><br>对于规模比较小的项目，我们可以直接在<code>app.js</code>中加入我们的JavaScript代码，无论基于什么前端框架。然而，随着项目规模逐渐增大，代码量越来越多，对代码进行模块化显得愈发重要（当然，这也是一个很好的编码习惯，最好从项目开始，就有这样的意识）。<br><a id="more"></a></p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote>
<p>对于部分可复用函数，我想将其单独存放，汇集成一个代码源文件，并<code>import</code>到<code>app.js</code>中来，同时，我亦想用TypeScript语言替换JavaScript语言以获得清晰的类型声明，我要怎么处理？</p>
</blockquote>
<h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>对于这一问题，我们可以分两步走:</p>
<ul>
<li>令程序能够自动加载和编译TypeScript代码；</li>
<li>正确导入单独存放的额可复用代码。</li>
</ul>
<h4 id="TypeScript-with-Laravel-Mix"><a href="#TypeScript-with-Laravel-Mix" class="headerlink" title="TypeScript with Laravel Mix"></a>TypeScript with Laravel Mix</h4><p>在<code>Laravel Framework 5.5</code> 中，要使项目正确地加载和编译TypeScript代码，我们首先需要安装<code>ts-loader</code>：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add ts-loader typescript --dev</span><br></pre></td></tr></table></figure><br>安装完毕后，我们需要对配置文件作一定的修改，在Shell中运行<code>node_modules/.bin/tsc --init</code>命令，将会在项目文件夹根目录生成配置文件<code>tsconfig.json</code>。对于该配置文件中的默认配置，我们不作修改，需要在最后加上<code>&quot;include&quot;: [&quot;resources/assets/js/**/*&quot;]</code>：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"include"</span>: [<span class="string">"resources/assets/js/**/*"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来，对<code>Laravel Mix</code>进行配置修改，在根目录中编辑<code>webpack.mix.js</code> 文件，修改如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; mix &#125; = <span class="built_in">require</span>(<span class="string">"laravel-mix"</span>);</span><br><span class="line"></span><br><span class="line">mix</span><br><span class="line">  .js(<span class="string">"resources/assets/js/app.js"</span>, <span class="string">"public/js"</span>)</span><br><span class="line">  .sass(<span class="string">"resources/assets/sass/app.scss"</span>, <span class="string">"public/css"</span>)</span><br><span class="line">  .webpackConfig(&#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">          loader: <span class="string">"ts-loader"</span>,</span><br><span class="line">          exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      extensions: [<span class="string">"*"</span>, <span class="string">".js"</span>, <span class="string">".jsx"</span>, <span class="string">".vue"</span>, <span class="string">".ts"</span>, <span class="string">".tsx"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><br>如此，我们的项目就能够正确地加载和编译TypeScript代码啦！</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在<code>resources/assets/js/</code>文件夹下创建<code>utility.ts</code>文件，并写入：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">helloWorld</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>保存后，打开<code>app.js</code>，使用<code>require()</code>函数<code>import</code>刚刚写好的TypeScript代码：<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utility = <span class="built_in">require</span>(<span class="string">'./utility'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(utility.helloWorld());</span><br></pre></td></tr></table></figure></p>
<p>保存并编译代码，就可以在<code>Console</code>中看到结果啦！</p>
<p>以上！ </p>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>Web Development</tag>
        <tag>Laravel</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Finite-State Machine</title>
    <url>/2019/11/26/Finite-Status-Machine/</url>
    <content><![CDATA[<p>有限状态机（Finite-State Machine, FSM）表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。状态机可归纳为4个要素，即现态、条件、动作、次态。“现态”和“条件”是因，“动作”和“次态”是果。</p>
<a id="more"></a>
<p>详解如下：</p>
<blockquote>
<p>① 现态：是指当前所处的状态。</p>
<p>② 条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</p>
<p>③ 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。</p>
<p>④ 次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。</p>
</blockquote>
<p>有限状态机对于算法求解具有重要的意义，其可以简化问题，使得复杂的递推关系转换为简单的状态转移问题。比如：</p>
<h4 id="552-学生出勤记录-II"><a href="#552-学生出勤记录-II" class="headerlink" title="552. 学生出勤记录 II"></a><a href="https://leetcode-cn.com/problems/student-attendance-record-ii/" target="_blank" rel="noopener">552. 学生出勤记录 II</a></h4><blockquote>
<p>给定一个正整数<code>n</code>，返回长度为<code>n</code>的所有可被视为可奖励的出勤记录的数量。 答案可能非常大，你只需返回结果<code>mod 1e9 + 7</code>的值。</p>
<p>学生出勤记录是只包含以下三个字符的字符串：</p>
<ol>
<li>‘A’ : Absent，缺勤</li>
<li>‘L’ : Late，迟到</li>
<li>‘P’ : Present，到场<br>如果记录不包含多于一个’A’（缺勤）或超过两个连续的’L’（迟到），则该记录被视为可奖励的。</li>
</ol>
</blockquote>
<h5 id="Simple-test-cases"><a href="#Simple-test-cases" class="headerlink" title="Simple test cases"></a>Simple test cases</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n = 2</span><br><span class="line">输出: 8 </span><br><span class="line">解释：</span><br><span class="line">有8个长度为2的记录将被视为可奖励：</span><br><span class="line">&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;</span><br><span class="line">只有&quot;AA&quot;不会被视为可奖励，因为缺勤次数超过一次。</span><br></pre></td></tr></table></figure>
<p>对于这个问题，我们的直觉是通过构造全排列，并依照判断条件，对符合条件的记录进行计数。显然，依照直觉暴力求解，必然会遇到超时问题。更好的思路是基于动态规划的思想，构造状态转移方程。但就本题而言，借助有限状态机，会大大地简化问题。</p>
<p>先来看题目，对于不可奖励的记录，其要么包含<code>2+</code>的<code>A</code>，或<code>3+</code>的连续的<code>L</code>，那么，仅仅需要考虑<code>A</code>和<code>L</code>的情况，我们将有限状态机画出来，得到：<br><img src="/2019/11/26/Finite-Status-Machine/status.png" alt="有限状态机"></p>
<p>由上图可见，对于节点<code>A0L0</code>，其入度为3，而节点<code>A1L0</code>入度为6，那么代码可以表示为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">checkRecord</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a0l0 = <span class="number">1</span>, a0l1 = <span class="number">0</span>, a0l2 = <span class="number">0</span>, a1l0 = <span class="number">0</span>, a1l1 = <span class="number">0</span>, a1l2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> a0l0_ = (a0l0 + a0l1 + a0l2) % m;</span><br><span class="line">            a0l2 = a0l1;</span><br><span class="line">            a0l1 = a0l0;</span><br><span class="line">            a0l0 = a0l0_;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> a1l0_ = (a0l0 + a1l0 + a1l1 + a1l2) % m;</span><br><span class="line">            a1l2 = a1l1;</span><br><span class="line">            a1l1 = a1l0;</span><br><span class="line">            a1l0 = a1l0_;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)a1l0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上！</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Greedy</title>
    <url>/2019/11/11/Greedy/</url>
    <content><![CDATA[<p>狭义的贪心算法指的是解最优化问题的一种特殊方法，解决过程中总是做出当下最好的选择，因为具有最优子结构的特点，局部最优解可以得到全局最优解；这种贪心算法是动态规划的一种特例。能用贪心解决的问题，也可以用动态规划解决。</p>
<a id="more"></a>
<p>广义的贪心指的是一种通用的贪心策略，基于当前局面而进行贪心决策。举个例子：</p>
<h4 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12.整数转罗马数字"></a><a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">12.整数转罗马数字</a></h4><blockquote>
<p>罗马数字包含以下七种字符：<code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code>和<code>M</code>，分别表示<code>1</code>，<code>5</code>，<code>10</code>，<code>50</code>，<code>100</code>，<code>500</code>，<code>1000</code>。<br>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: &quot;III&quot;</span><br><span class="line">---------------------</span><br><span class="line">输入: 4</span><br><span class="line">输出: &quot;IV&quot;</span><br><span class="line">---------------------</span><br><span class="line">输入: 58</span><br><span class="line">输出: &quot;LVIII&quot;</span><br><span class="line">解释: L = 50, V = 5, III = 3.</span><br><span class="line">------------------------------</span><br><span class="line">输入: 1994</span><br><span class="line">输出: &quot;MCMXCIV&quot;</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>
<p>本题从贪心算法的思路入手，可以考虑将目标数值，不断减去所能减去的最大的进位，得到罗马数字的表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; mapRom = &#123;&#123;<span class="number">1</span>,<span class="string">"I"</span>&#125;,&#123;<span class="number">4</span>,<span class="string">"IV"</span>&#125;,&#123;<span class="number">5</span>,<span class="string">"V"</span>&#125;,&#123;<span class="number">9</span>,<span class="string">"IX"</span>&#125;,&#123;<span class="number">10</span>,<span class="string">"X"</span>&#125;,&#123;<span class="number">40</span>,<span class="string">"XL"</span>&#125;,</span><br><span class="line">                                  &#123;<span class="number">50</span>,<span class="string">"L"</span>&#125;, &#123;<span class="number">90</span>,<span class="string">"XC"</span>&#125;,&#123;<span class="number">100</span>,<span class="string">"C"</span>&#125;,                               </span><br><span class="line">                                  &#123;<span class="number">400</span>,<span class="string">"CD"</span>&#125;,&#123;<span class="number">500</span>,<span class="string">"D"</span>&#125;,&#123;<span class="number">900</span>,<span class="string">"CM"</span>&#125;, &#123;<span class="number">1000</span>,<span class="string">"M"</span>&#125; &#125;;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;::reverse_iterator  r_iter;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> ret;</span><br><span class="line">       </span><br><span class="line">        r_iter=mapRom.rbegin();</span><br><span class="line">        <span class="keyword">while</span>(r_iter!=mapRom.rend())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= r_iter-&gt;first)</span><br><span class="line">            &#123;</span><br><span class="line">                ret += r_iter-&gt;second;</span><br><span class="line">                num-= r_iter-&gt;first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r_iter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>再来看另一道题，有时候题干并不会太明显地令你使用贪心算法，一定要灵活思考。</p>
<h4 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. 用最少数量的箭引爆气球</a></h4><blockquote>
<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在10000个气球。</p>
<p>一支弓箭可以沿着<code>x</code>轴从不同点完全垂直地射出。在坐标<code>x</code>处射出一支箭，若有一个气球的直径的开始和结束坐标为$x<em>{start}$，$x</em>{end}$， 且满足$x<em>{start} ≤ x ≤ x</em>{end}$，则该气球会被引爆。可以射出的弓箭的数量没有限制。弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>
</blockquote>
<h5 id="Simple-Test-Cases-1"><a href="#Simple-Test-Cases-1" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[[10,16], [2,8], [1,6], [7,12]]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。</span><br></pre></td></tr></table></figure>
<p>一种可行的思路是，对气球数组按末端大小进行排序，当两个气球不相交时，必然需要两支弓箭，反之，一支就行了，故而这亦是贪心算法的运用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">        sort(points.begin(), points.end(), [](<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; point1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; point2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (point1[<span class="number">1</span>] != point2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> point1[<span class="number">1</span>] &lt; point2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> point1[<span class="number">0</span>] &lt; point2[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>, end = points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &gt; end) &#123;</span><br><span class="line">                end = points[i][<span class="number">1</span>];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>此外，要注意对数组进行排序时，在<strong>C++</strong>排序函数尽量使用<code>&gt;</code>、<code>&lt;</code>、<code>=</code>符号，不要使用<code>+</code>、<code>-</code>符号，后者可能会出错。</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>如何整一个文化人的桌面？</title>
    <url>/2019/10/22/%E5%A6%82%E4%BD%95%E6%95%B4%E4%B8%80%E4%B8%AA%E6%96%87%E5%8C%96%E4%BA%BA%E7%9A%84%E6%A1%8C%E9%9D%A2%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>对于文化人来说，电脑桌面就是一个人的牌面。<br>——沃·兹基硕德</p>
</blockquote>
<a id="more"></a>
<p>不知道大家是否曾经苦恼过，如何找到令人耳目一新，体现个人文化品味的桌面壁纸？舍友许君是一位摄影大触，总能够精确地拍到那种发到朋友圈便会得到疯狂点赞的照片，这样的人是不会苦恼的。那么问题来了，假如我们没有单反，又不会拍照，如何愉快地崭露个人品（zhuāng）味（bī）？</p>
<p>某位不愿透露姓名的阿伯说过，“只要思想不滑坡，办法总比困难多”。我们要做文化人，就要有文化人的样子，比如精致的瓷器，能够体现你深厚的知识积累，和毒辣的鉴别眼光；比如写意的水墨画，总能令你身上透露出不俗的雅趣，比如…（“别废话了，快上干货！”“好勒！”</p>
<p>首先，鸣谢两位不愿透露姓名的陈焕茂同学和孙栋梁同学，为构造文化人的桌面提供了惊天动地的创意，而本人作为卑微的码农做了一点微小的工作。</p>
<p>我们的思路是这样的，故宫博物院为广大人民群众提供了精致而优雅的壁纸，并适配了不同分辨率的屏幕，还不定期更新（就问你贴不贴心？</p>
<p>普通人如何整一个文化人的桌面呢？很简单，打开<a href="https://www.dpm.org.cn/lights/royal.html" target="_blank" rel="noopener">故宫壁纸</a>，选择喜欢的壁纸，并根据自己电脑的分辨率下载壁纸即可，而后完成壁纸更换。（论文化人的诞生…</p>
<p>如果单单是这样，那么对懒癌文化人太不友好了，而且，一张图片怎能凸显我是整个图书馆最靓的崽？</p>
<blockquote>
<p>小孩子才做选择，成年人全部都要！</p>
</blockquote>
<p>所以，答案呼之欲出，人生苦短，我用Python，爬虫搞起！</p>
<p>啥也不说了，代码在这里：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, urlretrieve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scraper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://www.dpm.org.cn//lights/royal/p/&#123;&#125;.html'</span></span><br><span class="line">        <span class="comment"># 保存壁纸的文件夹，要自己设置哦～</span></span><br><span class="line">        self.directory = <span class="string">'./backgrounds/'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 由于天长日久，故宫壁纸项目也一直在完善</span></span><br><span class="line">        <span class="comment"># 所以，图片源会有变化，此处仅提供近期的图片源</span></span><br><span class="line">        <span class="comment"># 有需要的话，可以自己检查元素获取图片源哦～</span></span><br><span class="line">        self.source = <span class="string">'https://www.dpm.org.cn/download/lights_image/id/&#123;&#125;/img_size/4.html'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, page)</span>:</span></span><br><span class="line">        doc = urlopen(self.url.format(page))</span><br><span class="line">        soup = BeautifulSoup(doc, <span class="string">'html.parser'</span>)</span><br><span class="line">        images = soup.find_all(<span class="string">'div'</span>, class_=<span class="string">'pic'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">            name = image.find(<span class="string">'img'</span>)[<span class="string">'title'</span>] + <span class="string">'.jpg'</span></span><br><span class="line">            image_id = image.find(<span class="string">'a'</span>)[<span class="string">'href'</span>].split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">            urlretrieve(self.source.format(image_id), os.path.join(self.directory, name))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Complete! Pictures are in '</span> + self.directory)</span><br><span class="line"></span><br><span class="line">scraper = Scraper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实就是故宫壁纸网站的页码</span></span><br><span class="line">page = input(<span class="string">'输入你的幸运数字：'</span>)</span><br><span class="line"></span><br><span class="line">scraper.load(page)</span><br></pre></td></tr></table></figure></p>
<p>想要运行上述代码，则需要你的电脑能够运行<code>Python@&gt;=3.0</code>，那么，假如你的电脑是mac，又安装了<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a>，那么你可以：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install python</span><br></pre></td></tr></table></figure></p>
<p>假如你的电脑是Windows，又安装了<a href="https://scoop.sh" target="_blank" rel="noopener">Scoop</a>，那么，你可以：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scoop install python</span><br></pre></td></tr></table></figure></p>
<p>接下来，我们需要安装爬虫依赖包<code>BeautifulSoup</code>，即：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install bs4</span><br></pre></td></tr></table></figure></p>
<p>现在，你即将成为准文化人，继续命令行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="comment"># 打开源代码所在文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> /path/to/source.py</span><br><span class="line">$ <span class="comment"># 运行源代码</span></span><br><span class="line">$ python source.py</span><br></pre></td></tr></table></figure></p>
<p>事情结束了嘛？并没有！可达鸭眉头一皱，发现事情并不简单！假如我们想要让桌面壁纸每隔一段时间换一张，咋整呢？</p>
<p>第一步，打开<code>系统偏好设置</code>：<br><img src="/2019/10/22/%E5%A6%82%E4%BD%95%E6%95%B4%E4%B8%80%E4%B8%AA%E6%96%87%E5%8C%96%E4%BA%BA%E7%9A%84%E6%A1%8C%E9%9D%A2%EF%BC%9F/系统偏好设置.png" alt="系统偏好设置"></p>
<p>第二步，选择<code>桌面与屏幕保护程序</code>：<br><img src="/2019/10/22/%E5%A6%82%E4%BD%95%E6%95%B4%E4%B8%80%E4%B8%AA%E6%96%87%E5%8C%96%E4%BA%BA%E7%9A%84%E6%A1%8C%E9%9D%A2%EF%BC%9F/桌面与屏幕保护程序.png" alt="桌面与屏幕保护程序"></p>
<p>还记得之前保存图片的文件夹嘛？点击<code>+</code>，选择那个文件夹，而后勾选<code>更改图片</code>和<code>随机顺序</code>，完结撒花🎉！</p>
<p>从现在开始，你就是一个文化人了！</p>
<blockquote>
<p>题外话：<br>某位不愿透露姓名的陈焕茂同学表示，“自从用了故宫壁纸，随机切换，每天腰不酸、腿不…不是，每天都有新的惊喜！”</p>
</blockquote>
<p>以上！</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Sliding Window</title>
    <url>/2019/10/06/Sliding-Window/</url>
    <content><![CDATA[<p>滑动窗口（Sliding Window），顾名思义，即在数组/字符串设计一个左边界和一个右边界，从而获得一定长度的子元素，在此基础上，窗口随着边界的变化而滑动。其用于解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。</p>
<a id="more"></a>
<p>我们可以通过一组题目来比较好的理解滑动窗口的应用：</p>
<h4 id="485-最大连续1的个数"><a href="#485-最大连续1的个数" class="headerlink" title="485. 最大连续1的个数"></a><a href="https://leetcode-cn.com/problems/max-consecutive-ones/" target="_blank" rel="noopener">485. 最大连续1的个数</a></h4><blockquote>
<p>给定一个二进制数组， 计算其中最大连续1的个数。</p>
</blockquote>
<h5 id="Simple-Test-Case"><a href="#Simple-Test-Case" class="headerlink" title="Simple Test Case"></a>Simple Test Case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,1,0,1,1,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.</span><br></pre></td></tr></table></figure>
<p>对于这道题，我们很容易能够想到暴力解决的办法，对数组内的元素遍历一次，设置变量<code>count</code>，逢1加1，逢0归0，最后得到最大的<code>count</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                max_len = max(max_len, count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>那么，如果为其增加一个条件，比如可以最多将数组中的一个0翻转为1，那如何求最大长度呢？</p>
<h4 id="487-最大连续1的个数-II"><a href="#487-最大连续1的个数-II" class="headerlink" title="487. 最大连续1的个数 II"></a><a href="https://leetcode-cn.com/problems/max-consecutive-ones-ii/" target="_blank" rel="noopener">487. 最大连续1的个数 II</a></h4><blockquote>
<p>给定一个二进制数组，你可以最多将 1 个 0 翻转为 1，找出其中最大连续 1 的个数。</p>
</blockquote>
<h5 id="Simple-Test-Case-1"><a href="#Simple-Test-Case-1" class="headerlink" title="Simple Test Case"></a>Simple Test Case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[1,0,1,1,0]</span><br><span class="line">输出：4</span><br><span class="line">解释：翻转第一个 0 可以得到最长的连续 1。当翻转以后，最大连续 1 的个数为 4。</span><br></pre></td></tr></table></figure>
<p>这时，我们可以采取滑动窗口算法，计算窗口内元素1的数量，判断<code>窗口大小 - 元素1的数量 &gt; 1</code>是否为真，如果其为真，那么说明窗口内部包含1个以上的0元素，需要收紧窗口，最后求最大窗口即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; nums.size(); ++r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[r] == <span class="number">1</span>) count++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (r - l + <span class="number">1</span> - count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[l++]) --count;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果放宽限制，我们可以最多将<code>K</code>个值从0翻转为1呢？</p>
<h4 id="1004-最大连续1的个数-III"><a href="#1004-最大连续1的个数-III" class="headerlink" title="1004. 最大连续1的个数 III"></a><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. 最大连续1的个数 III</a></h4><blockquote>
<p>给定一个由若干<code>0</code>和<code>1</code>组成的数组<code>A</code>，我们最多可以将<code>K</code>个值从<code>0</code>变成<code>1</code>。</p>
<p>返回仅包含<code>1</code>的最长（连续）子数组的长度。</p>
</blockquote>
<h5 id="Simple-Test-Cases"><a href="#Simple-Test-Cases" class="headerlink" title="Simple Test Cases"></a>Simple Test Cases</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：A = [1,1,1,0,0,0,1,1,1,1,0], K = 2</span><br><span class="line">输出：6</span><br><span class="line">解释： </span><br><span class="line">[1,1,1,0,0,1,1,1,1,1,1] 粗体数字从 0 翻转到 1，最长的子数组长度为 6。</span><br><span class="line">---------------</span><br><span class="line">输入：A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3</span><br><span class="line">输出：10</span><br><span class="line">解释：</span><br><span class="line">[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]</span><br><span class="line">粗体数字从 0 翻转到 1，最长的子数组长度为 10。</span><br></pre></td></tr></table></figure>
<p>实际上，只是限制条件的变化，滑动窗口的思路与第二题是一样的，因此，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> count = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; A.size(); ++r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[r] == <span class="number">1</span>) count++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (r - l + <span class="number">1</span> - count &gt; K) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[l++]) --count;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Monostone Stack</title>
    <url>/2019/10/05/Monostone-Stack/</url>
    <content><![CDATA[<p>单调栈，顾名思义，满足单调性的栈结构。举个例子，存在一个栈结构，自底向上的元素为<code>[1, 3, 5, 10, 30, 50]</code>，那么，现欲将新元素<code>20</code>插入其中，需要率先弹出<code>[30, 50]</code>，再将元素<code>20</code>插入，用伪代码描述如下：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert x</span><br><span class="line">while !stack.empty() &amp;&amp; stack.top &gt; x</span><br><span class="line">    stack.pop()</span><br><span class="line"></span><br><span class="line">stack.push(x)</span><br></pre></td></tr></table></figure>
<p>再来看实际应用，比如LeetCode中等难度题目<a href="https://leetcode-cn.com/problems/remove-k-digits/" target="_blank" rel="noopener">402. 移掉K位数字</a>。</p>
<h4 id="移掉K位数字"><a href="#移掉K位数字" class="headerlink" title="移掉K位数字"></a>移掉K位数字</h4><blockquote>
<p>给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。<br><strong>注意：</strong></p>
<ul>
<li>num 的长度小于 10002 且 ≥ k。</li>
<li>num 不会包含任何前导零。<h5 id="Simple-Test-Case"><a href="#Simple-Test-Case" class="headerlink" title="Simple Test Case"></a>Simple Test Case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: num = &quot;1432219&quot;, k = 3</span><br><span class="line">输出: &quot;1219&quot;</span><br><span class="line">解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。</span><br><span class="line">-----------</span><br><span class="line">输入: num = &quot;10200&quot;, k = 1</span><br><span class="line">输出: &quot;200&quot;</span><br><span class="line">解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</span><br><span class="line">-----------</span><br><span class="line">输入: num = &quot;10&quot;, k = 2</span><br><span class="line">输出: &quot;0&quot;</span><br><span class="line">解释: 从原数字移除所有的数字，剩余为空就是0。</span><br></pre></td></tr></table></figure>
对此，可以采用单调栈结构来择取最小的数字，C++代码如下：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">removeKdigits</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = num.size(), m = n - k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : num) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &amp;&amp; res.size() &amp;&amp; res.back() &gt; c) &#123;</span><br><span class="line">                res.pop_back();</span><br><span class="line">                --k;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.resize(m);</span><br><span class="line">        <span class="comment">//去除前导0， 如10200，k = 1</span></span><br><span class="line">        <span class="keyword">while</span> (!res.empty() &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>) &#123;</span><br><span class="line">            res.erase(res.begin());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.empty() ? <span class="string">"0"</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
再来看单调递增的情况，比如LeetCode困难级别的题目<a href="https://leetcode-cn.com/problems/create-maximum-number/" target="_blank" rel="noopener">321. 拼接最大数</a>。<h4 id="拼接最大数"><a href="#拼接最大数" class="headerlink" title="拼接最大数"></a>拼接最大数</h4>给定长度分别为<code>m</code>和<code>n</code>的两个数组，其元素由<code>0-9</code>构成，表示两个自然数各位上的数字。现在从这两个数组中选出<code>k (k &lt;= m + n)</code>个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</li>
</ul>
<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为<code>k</code>的数组。</p>
<p>说明: 请尽可能地优化你算法的时间和空间复杂度。</p>
</blockquote>
<h5 id="Simple-Test-Case-1"><a href="#Simple-Test-Case-1" class="headerlink" title="Simple Test Case"></a>Simple Test Case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">nums1 = [3, 4, 6, 5]</span><br><span class="line">nums2 = [9, 1, 2, 5, 8, 3]</span><br><span class="line">k = 5</span><br><span class="line">输出:</span><br><span class="line">[9, 8, 6, 5, 3]</span><br><span class="line">-----------</span><br><span class="line">输入:</span><br><span class="line">nums1 = [6, 7]</span><br><span class="line">nums2 = [6, 0, 4]</span><br><span class="line">k = 5</span><br><span class="line">输出:</span><br><span class="line">[6, 7, 6, 0, 4]</span><br><span class="line">-----------</span><br><span class="line">输入:</span><br><span class="line">nums1 = [3, 9]</span><br><span class="line">nums2 = [8, 9]</span><br><span class="line">k = 3</span><br><span class="line">输出:</span><br><span class="line">[9, 8, 9]</span><br></pre></td></tr></table></figure>
<p>同样，一个简单的思路是，维护一个大小固定为<code>k</code>的单调栈，每次选出和最大的单调栈，最终得到拼接结果，C++代码如下：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.size(), n = nums2.size();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = max(<span class="number">0</span>, k - n); i &lt;= min(k, m); ++i) &#123;</span><br><span class="line">            res = max(res, mergeVector(maxVector(nums1, i), maxVector(nums2, k - i)));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单调栈</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maxVector(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> drop = nums.size() - k;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">while</span> (drop &amp;&amp; res.size() &amp;&amp; res.back() &lt; num) &#123;</span><br><span class="line">                res.pop_back();</span><br><span class="line">                --drop;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.resize(k);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mergeVector(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums2) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(nums1.size() + nums2.size()) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;tmp = nums1 &gt; nums2 ? nums1 : nums2;</span><br><span class="line">            res.push_back(tmp[<span class="number">0</span>]);</span><br><span class="line">            tmp.erase(tmp.begin());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Factorial with big numbers</title>
    <url>/2019/07/20/Factorial-with-big-numbers/</url>
    <content><![CDATA[<p>在数学中，正整数的阶乘（Factorial）被定义为所有小于及等于该数的正整数的积，其数学表示为$n!=1 \times 2 \times 3 \times … \times n$，同时，定义$0!=1$，$1!=1$。当$n$比较小时，可以很方便地借助递归函数，求得其阶乘值，比如：</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n &gt; <span class="number">1</span>) ? n * factorial(n - <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然而，当$n$比较大时，其阶乘值极大，不容易通过上述递归函数求得，比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  100</span><br><span class="line">Output: 933262154439441526816992388562667004-</span><br><span class="line">        907159682643816214685929638952175999-</span><br><span class="line">        932299156089414639761565182862536979-</span><br><span class="line">        208272237582511852109168640000000000-</span><br><span class="line">        00000000000000</span><br><span class="line">Input:  50</span><br><span class="line">Output: 3041409320171337804361260816606476884-</span><br><span class="line">        4377641568960512000000000000</span><br></pre></td></tr></table></figure></p>
<p>因此，必须考虑新的方法。我们可以定义一个大小为<code>MAX</code>的数组，即<code>res[MAX]</code>，而后令正整数<code>x</code>乘以<code>res[X]</code>，并更新<code>res[X]</code>的值，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 存在一个正整数36，其表示方法为：</span><br><span class="line">res[] = [6, 3]  # size = 2</span><br><span class="line"></span><br><span class="line"># 存在因数2</span><br><span class="line">x = 2</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">carry = 0</span><br><span class="line"></span><br><span class="line"># stop iff i == 2</span><br><span class="line">i = 0, product = res[0] * x + carry = 12 =&gt; res[0] = 2, carry = 1</span><br><span class="line">i += 1</span><br><span class="line"></span><br><span class="line"># update</span><br><span class="line">i = 1, product = res[1] * x + carry = 7  =&gt; res[1] = 7, carry = 0</span><br><span class="line"></span><br><span class="line">res[] = [2, 7]</span><br></pre></td></tr></table></figure>
<p>于是，对于大数的阶乘算法，以C++代码表示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> res[], <span class="keyword">int</span> res_size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; res_size; ++k) &#123;</span><br><span class="line">        <span class="keyword">int</span> prod = res[k] * i + carry;</span><br><span class="line">        res[k] = prod % <span class="number">10</span>;</span><br><span class="line">        carry = prod / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (carry) &#123;</span><br><span class="line">        res[res_size] = carry % <span class="number">10</span>;</span><br><span class="line">        carry = carry / <span class="number">10</span>;</span><br><span class="line">        res_size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> factorial)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res[MAX];</span><br><span class="line">    <span class="built_in">string</span> out;</span><br><span class="line">    </span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res_size = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= factorial; ++i) &#123;</span><br><span class="line">        res_size = multiply(i, res, res_size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = res_size - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">        out += to_string(res[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原题来源：<a href="https://www.codewars.com/kata/large-factorials/cpp" target="_blank" rel="noopener">Codewars - Large Factorials</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/2019/07/12/Dynamic-Programming/</url>
    <content><![CDATA[<blockquote>
<p>Those who cannot remember the past are condemned to repeat it.</p>
</blockquote>
<a id="more"></a>
<p>动态规划(Dynamic Programming)算法的核心是记住已经解决过的字问题的解。如何理解呢？举个例子：</p>
<p>假如我们要求斐波那契数列中的第<code>n</code>个数，一种简单的求法是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> &amp;n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，借助递归来求斐波那契数列，其复杂度是指数级的，如果要降低复杂度呢？很简单，利用动态规划：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> &amp;n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; ++i) &#123;</span><br><span class="line">        f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在<strong>不触动警报装置的情况下</strong>，能够偷窃到的最高金额。</p>
<p>示例：<br>输入：[1, 2, 3, 1]<br>输出：4 = 1 + 3</p>
</blockquote>
<p>对于小偷来说，需要考虑当前的房子能够带来的收益，同时，至少到第3间房，才能开始动手，故而前两间房子的初始收益可以设置为<code>dp = {0, 0}</code>。</p>
<p>接下来，如果偷一间房，那么其收益为<code>dp[i - 2] + 当前房子的收益</code>，反之，则收益为<code>dp[i - 1]</code>。故而，其转移状态方程为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i] = max(dp[i - 2] + nums[i - 2], dp[i - 1]);</span><br></pre></td></tr></table></figure></p>
<p><strong>代码</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(nums.size() + <span class="number">2</span>, <span class="number">0</span>); <span class="comment">// &#123;0, 0, 0, ... , 0&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.size() + <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dp[i] = max(dp[i<span class="number">-2</span>] + nums[i<span class="number">-2</span>], dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[nums.size()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>再来看著名的硬币问题，即给定一定数量的硬币<code>[1, 5, 10]</code>，针对自然数<code>N</code>，给出其所有可能的组合方案，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  N = 12</span><br><span class="line">        coins = [1, 5, 10]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation: 1 way: 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 12</span><br><span class="line">             2 way: 1 + 1 + 1 + 1 + 1 + 1 + 5 + 1 + 1 = 12</span><br><span class="line">             3 way: 5 + 5 + 1 + 1 = 12</span><br><span class="line">             4 way: 10 + 1 + 1 = 12</span><br></pre></td></tr></table></figure>
<p>从动态规划的角度看，5个1便士可以换成1个5便士，10个1便士可以换成2个5便士或1个10便士，那么针对自然数N以内的所有求解方案，都可以基于该换算进行。比如4便士只能由4个1便士组成，6便士则既可以用6个1便士，也可以将前5个1便士替换为1个5便士，那么自然数12以内的组合如下所示:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N: 1  2  3  4  5  6  7  8  9  10 11 12</span><br><span class="line"></span><br><span class="line">1: 1  1  1  1  1  1  1  1  1  1  1  1</span><br><span class="line"></span><br><span class="line">2: 0  0  0  0  5  1  1  1  1  1  1  1     ($5=1 \times 5$）</span><br><span class="line"></span><br><span class="line">3: 0  0  0  0  5  0  0  0  0  5  1  1     </span><br><span class="line"></span><br><span class="line">4: 0  0  0  0  0  0  0  0  0  10 1  1     ($10= 1 \times 10=5 \times 2$)</span><br></pre></td></tr></table></figure></p>
<p>接下来，用<code>C++</code>代码求解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countChange</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> money, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt; ways(money + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialization</span></span><br><span class="line">    ways[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;coin : coins) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; money + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (coin &lt;= i) &#123;</span><br><span class="line">                ways[i] += ways[i - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ways[money];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动态规划</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>利用XGBoost进行NLP分类任务</title>
    <url>/2019/03/26/%E5%88%A9%E7%94%A8XGBoost%E8%BF%9B%E8%A1%8CNLP%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><blockquote>
<p><strong>Semantic Relation Extraction and Classification in Scientific Papers</strong></p>
<p>Subtask: 1 - Relation classification</p>
<p>1.1 Relation classification on clean data</p>
<p>1.2 Relation classification on noisy data</p>
</blockquote>
<a id="more"></a>
<h4 id="Classes-Semantic-Relations"><a href="#Classes-Semantic-Relations" class="headerlink" title="Classes - Semantic Relations"></a>Classes - Semantic Relations</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">relations = [<span class="string">'usage'</span>, <span class="string">'result'</span>, <span class="string">'model-feature'</span>, <span class="string">'part-whole'</span>, <span class="string">'topic'</span>, <span class="string">'comparison'</span>]</span><br></pre></td></tr></table></figure>
<h4 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h4><p><strong>Lexical Features</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Features</th>
<th>Remarks</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>L1</td>
<td>Distance which shows the distances between entities</td>
<td>Int</td>
</tr>
<tr>
<td>L2</td>
<td>hasIn(Model-Feature, Part-Whole)</td>
<td>int(0, 1)</td>
</tr>
<tr>
<td>L3</td>
<td>hasOf(Topic, Result)</td>
<td>Int(0, 1)</td>
</tr>
<tr>
<td>L4</td>
<td>hasFor(Usage)</td>
<td>Int(0, 1)</td>
</tr>
<tr>
<td>L5</td>
<td>hasWith(Compare)</td>
<td>int(0, 1)</td>
</tr>
<tr>
<td>L6</td>
<td>hasThan(Compare)</td>
<td>Int(0, 1)</td>
</tr>
<tr>
<td>L7</td>
<td>hasAnd</td>
<td>Int(0, 1)</td>
</tr>
<tr>
<td>L8</td>
<td>hasFrom</td>
<td>Int(0, 1)</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Entity Features</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Features</th>
<th>Remarks</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>L1</td>
<td>For comparison, it’s necessary to measure Similarity(sim200)</td>
<td>Float</td>
</tr>
<tr>
<td>L2</td>
<td>Similarity Bucket</td>
<td>int(0, 1, 2, 3, 4)</td>
</tr>
<tr>
<td>L3</td>
<td>Position of Entity (Text)</td>
<td>LabelEnocder (Text Index)</td>
</tr>
<tr>
<td>L4</td>
<td>Start Entity</td>
<td>Index</td>
</tr>
<tr>
<td>L5</td>
<td>End Entity</td>
<td>Index</td>
</tr>
</tbody>
</table>
</div>
<p>数据预处理</p>
<ul>
<li><p>input format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array[[...feature_values...label],...]</span><br></pre></td></tr></table></figure>
</li>
<li><p>output format <code>.csv</code></p>
</li>
</ul>
<h4 id="Model-Training"><a href="#Model-Training" class="headerlink" title="Model Training"></a>Model Training</h4><p>It seems to be better to use XGBoost as well as Scikit-Learning. In other words, use XGB.fit() rather then XGB.train().</p>
<h4 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h4>]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>自然语言处理</tag>
        <tag>XGBoost</tag>
      </tags>
  </entry>
</search>
